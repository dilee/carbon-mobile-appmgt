<%
include("/extensions/mobileapp/modules/jagg/jagg.jag");
(function(){
	var CONTENT_TYPE_JSON = "application/json";
	var log=new Log();
	var caramel = require('caramel');
	var contextPath = caramel.configs().context;
	var apiProvider = jagg.module('manager').getAPIProviderObj();
	var storageLocation = apiProvider.getBinaryFileStorage();


	var makeid= function()
	{
		var text = "";
		var possible = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";

		for( var i=0; i < 15; i++ )
			text += possible.charAt(Math.floor(Math.random() * possible.length));

		return text;
	}
	var getExtension = function(file){
		var path = file.getName();
		var index = path.lastIndexOf('.');
		var ext = index < path.length ? path.substring(index + 1) : '';
		return ext;
	}
	var getFileOnly = function(file){
		var path = file.getName();
		var index = path.lastIndexOf('.');
		var name = index < path.length ? path.substring(0,index) : '';
		return name;
	}
	var saveFile = function (file) {
		if (file != undefined) {
			var file_n = file.getName();
			file_n = "." + file_n.split('.').pop();

			if (file_n == "") {
				return "";
			}
			var uid = makeid();
			var filePath = storageLocation + uid + file_n;

			var fileTemp = new File('file://' + filePath);
			try {
				fileTemp.open('w');
				fileTemp.write(file.getStream());
			} catch (e) {
				print(e);
			} finally {
				fileTemp.close();
			}

			return uid + file_n;
		}
		return "";
	}
	function mergeRecursive(obj1, obj2) {
		for (var p in obj2) {
			try {
				// Property in destination object set; update its value.
				if (obj2[p].constructor == Object) {
					obj1[p] = MergeRecursive(obj1[p], obj2[p]);
				} else {
					obj1[p] = obj2[p];
				}
			} catch (e) {
				// Property in destination object not set; create it and set its value.
				obj1[p] = obj2[p];
			}
		}
		return obj1;
	}
	var file = request.getAllFiles().file;
	var meta = {};
	if(file==undefined){
		//return error
		response.sendError(500);
	}else{
		var fileName =  saveFile(file);
		meta.path = fileName;

		var ext = getExtension(file);
		if (ext == "ipa" || ext == "apk") {
			var zipFileReading = new Packages.org.wso2.mobile.utils.utilities.ZipFileReading();
			var path = storageLocation + fileName;

			log.debug("META PATH: " + path);
			try {
				if (ext == "ipa") {
					var d = zipFileReading.readiOSManifestFile(path, getFileOnly(file));
					log.debug(d);
					var information = JSON.parse(d);
					mergeRecursive(meta, information);
				} else if (ext == "apk") {
					var d = zipFileReading.readAndroidManifestFile(path);
					log.debug(d);
					var information = JSON.parse(d);
					mergeRecursive(meta, information);
				}
				response.contentType = CONTENT_TYPE_JSON;
				print(meta);
				log.debug("Successfully discovered");
			} catch (e) {
				log.debug("Uploaded file is corrupted");
				response.contentType = CONTENT_TYPE_JSON;
				print({
					"ok": false,
					"message": "Validation failure",
					"report": {"failed": true, "name": ["Uploaded file is corrupted"]}
				})
			}
		} else {
			response.contentType = CONTENT_TYPE_JSON;
			print({
				"ok": false,
				"message": "Validation failure",
				"report": {"failed": true, "name": ["Invalid Filetype - Uploaded file is not an archive"]}
			})
			return;
		}
	}
}());
%>
